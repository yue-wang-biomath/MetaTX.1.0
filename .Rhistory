weight_start     <- num_bin_promoter + 1
weight_end       <- num_bin_promoter + num_bin_fiveUTR + num_bin_cds + num_bin_threeUTR
weight_mtr       <- replicate(num_bin_sum, rowSums(width_mtr[, weight_start:weight_end]))
alpha            <- get_correct_prob_function(num_bin_sum, align_mtr, weight_mtr^lambda, trans_info)[[1]]
data_plot           <- data.frame(coord  = coord
, value =  alpha / colSums(width_mtr) * nrow(align_mtr)
, type  = paste0(legend, '_MetaTX'))
legend = ''
data_plot           <- data.frame(coord  = coord
, value =  alpha / colSums(width_mtr) * nrow(align_mtr)
, type  = paste0(legend, '_MetaTX'))
colnames(data_plot)  <- c('coord', 'value', 'type')
row.names(data_plot) <- 1:nrow(data_plot)
max_coord            <- max(data_plot[, 2])
p1 <-
ggplot(data_plot, aes(x=coord, y=value)) +
ggtitle(title) +
theme(panel.background =element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
legend.position = 'bottom',
axis.text=element_text(size = 8),
legend.text=element_text(size = 8),
axis.title.y =element_text(size = 8 ,hjust=0.5),
title = element_text(size = 8, face='bold')) +
geom_smooth(size = 0.8, fullrange = TRUE, span = 0.15, se = FALSE, show.legend =TRUE, aes(color = factor(type))) +
xlab("") + scale_color_manual(values = 'blue') +
ylab("Density
") +
annotate("text", x = xintercept_1[1] / 2, y = -0.007/0.1*max_coord, label = "Promoter", size = 3) +
annotate("text", x =  xintercept_1[1] + coord_5utr_interval / 2, y = -0.007/0.1*max_coord, label = "5'UTR", size = 3) +
annotate("text", x =  xintercept_1[2] + coord_cds_interval / 2, y = -0.007/0.1*max_coord, label = "CDS", size = 3) +
annotate("text", x =  xintercept_1[3] +  coord_3utr_interval / 2, y = -0.007/0.1*max_coord, label = "3'UTR", size = 3) +
annotate("text", x =  xintercept_1[4] +  coord_tail_interval / 2, y = -0.007/0.1*max_coord, label = "Tail", size = 3) +
geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")+
annotate("rect", xmin = xintercept_1[2], xmax = xintercept_1[3], ymin = -0.0042/0.1*max_coord, ymax = -0.0017/0.1*max_coord, alpha = .3, colour = "black")+
annotate("rect", xmin = xintercept_1[3], xmax = xintercept_1[4], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")
p1
data_plot
data_plot <- data.frame(coord = coord, value = alpha/colSums(width_mtr) *
nrow(align_mtr), type = paste0(legend, "_MetaTX"))
colnames(data_plot) <- c("coord", "value", "type")
row.names(data_plot) <- 1:nrow(data_plot)
max_coord <- max(data_plot[, 2])
p1 <- ggplot(data_plot, aes(x = coord, y = value)) +
ggtitle(title) + theme(panel.background = element_blank(),
panel.grid.major = element_line(colour = "grey",
linetype = 9, size = 0.20000000000000001),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5,
linetype = 9, lineend = "butt"), legend.position = "bottom",
axis.text = element_text(size = 8), legend.text = element_text(size = 8),
axis.title.y = element_text(size = 8, hjust = 0.5),
title = element_text(size = 8, face = "bold")) +
geom_smooth(size = 0.80000000000000004, fullrange = TRUE,
span = 0.14999999999999999, se = FALSE, show.legend = TRUE,
aes(color = factor(type))) + xlab("") + scale_color_manual(values = "blue") +
ylab("Density\n               ") + annotate("text",
x = xintercept_1[1]/2, y = -0.0070000000000000001/0.10000000000000001 *
max_coord, label = "Promoter", size = 3) +
annotate("text", x = xintercept_1[1] + coord_5utr_interval/2,
y = -0.0070000000000000001/0.10000000000000001 *
max_coord, label = "5'UTR", size = 3) + annotate("text",
x = xintercept_1[2] + coord_cds_interval/2, y = -0.0070000000000000001/0.10000000000000001 *
max_coord, label = "CDS", size = 3) + annotate("text",
x = xintercept_1[3] + coord_3utr_interval/2,
y = -0.0070000000000000001/0.10000000000000001 *
max_coord, label = "3'UTR", size = 3) + annotate("text",
x = xintercept_1[4] + coord_tail_interval/2,
y = -0.0070000000000000001/0.10000000000000001 *
max_coord, label = "Tail", size = 3) + geom_vline(xintercept = xintercept_1,
linetype = 9, size = 0.20000000000000001, colour = "black") +
annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2],
ymin = -0.0032000000000000002/0.10000000000000001 *
max_coord, ymax = -0.0025000000000000001/0.10000000000000001 *
max_coord, alpha = 0.80000000000000004, colour = "black") +
annotate("rect", xmin = xintercept_1[2], xmax = xintercept_1[3],
ymin = -0.0041999999999999997/0.10000000000000001 *
max_coord, ymax = -0.0016999999999999999/0.10000000000000001 *
max_coord, alpha = 0.29999999999999999, colour = "black") +
annotate("rect", xmin = xintercept_1[3], xmax = xintercept_1[4],
ymin = -0.0032000000000000002/0.10000000000000001 *
max_coord, ymax = -0.0025000000000000001/0.10000000000000001 *
max_coord, alpha = 0.80000000000000004, colour = "black")
p1
data_plot           <- data.frame(coord  = coord
, value =  alpha / colSums(width_mtr) * nrow(align_mtr)
, type  = paste0(legend, '_MetaTX'))
colnames(data_plot)  <- c('coord', 'value', 'type')
row.names(data_plot) <- 1:nrow(data_plot)
max_coord            <- max(data_plot[, 2])
p1 <-
ggplot(data_plot, aes(x=coord, y=value)) +
ggtitle(title) +
theme(panel.background =element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
legend.position = 'bottom',
axis.text=element_text(size = 8),
legend.text=element_text(size = 8),
axis.title.y =element_text(size = 8 ,hjust=0.5),
title = element_text(size = 8, face='bold')) +
geom_smooth(size = 0.8, fullrange = TRUE, span = 0.15, se = FALSE, show.legend =TRUE, aes(color = factor(type))) +
xlab("") + scale_color_manual(values = 'blue') +
ylab("Density
") +
annotate("text", x = xintercept_1[1] / 2, y = -0.007/0.1*max_coord, label = "Promoter", size = 3) +
annotate("text", x =  xintercept_1[1] + coord_5utr_interval / 2, y = -0.007/0.1*max_coord, label = "5'UTR", size = 3) +
annotate("text", x =  xintercept_1[2] + coord_cds_interval / 2, y = -0.007/0.1*max_coord, label = "CDS", size = 3) +
annotate("text", x =  xintercept_1[3] +  coord_3utr_interval / 2, y = -0.007/0.1*max_coord, label = "3'UTR", size = 3) +
annotate("text", x =  xintercept_1[4] +  coord_tail_interval / 2, y = -0.007/0.1*max_coord, label = "Tail", size = 3) +
geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")+
annotate("rect", xmin = xintercept_1[2], xmax = xintercept_1[3], ymin = -0.0042/0.1*max_coord, ymax = -0.0017/0.1*max_coord, alpha = .3, colour = "black")+
annotate("rect", xmin = xintercept_1[3], xmax = xintercept_1[4], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")
p1
data_plot            <- data.frame(coord  = coord
, value =    alpha / colSums(width_mtr) / sum(alpha / colSums(width_mtr))
, type  = paste0(legend, '_MetaTX'))
colnames(data_plot)  <- c('coord', 'value', 'type')
row.names(data_plot) <- 1:nrow(data_plot)
coord_interval_seq   <- c(replicate(num_bin,coord_promoter_interval / num_bin),
replicate(num_bin,coord_5utr_interval / num_bin),
replicate(num_bin,coord_cds_interval / num_bin),
replicate(num_bin,coord_3utr_interval / num_bin),
replicate(num_bin,coord_tail_interval / num_bin))
max_coord            <- max(data_plot[, 2])
max_coord_relative   <- max_coord / sum(data_plot[,2] * coord_interval_seq)
max_coord_relative   <- max_coord_relative / adjust
adjust = 0.1
data_plot            <- data.frame(coord  = coord
, value =    alpha / colSums(width_mtr) / sum(alpha / colSums(width_mtr))
, type  = paste0(legend, '_MetaTX'))
colnames(data_plot)  <- c('coord', 'value', 'type')
row.names(data_plot) <- 1:nrow(data_plot)
coord_interval_seq   <- c(replicate(num_bin,coord_promoter_interval / num_bin),
replicate(num_bin,coord_5utr_interval / num_bin),
replicate(num_bin,coord_cds_interval / num_bin),
replicate(num_bin,coord_3utr_interval / num_bin),
replicate(num_bin,coord_tail_interval / num_bin))
max_coord            <- max(data_plot[, 2])
max_coord_relative   <- max_coord / sum(data_plot[,2] * coord_interval_seq)
max_coord_relative   <- max_coord_relative / adjust
data_plot_1            <- data_plot
plot_values            <- data_plot[, 2]
plot_values            <- c(plot_values[1:num_bin] * coord_promoter_interval,
plot_values[1:num_bin + num_bin] * coord_5utr_interval,
plot_values[1:num_bin + num_bin*2] * coord_cds_interval,
plot_values[1:num_bin + num_bin*3] * coord_3utr_interval,
plot_values[1:num_bin + num_bin*4] * coord_tail_interval)
plot_values            <-  plot_values / sum(plot_values)
data_plot_1[, 2]       <- plot_values
p1 <-
ggplot(data_plot_1, aes(x=coord, group=type, weight=value)) +
ggtitle(title) +
theme(panel.background =element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
legend.position = 'bottom',
axis.text=element_text(size = 8),
legend.text=element_text(size = 8),
axis.title.y =element_text(size = 8 ,hjust=0.5),
title = element_text(size = 8, face='bold')) +
geom_density(adjust = adjust, aes(fill=factor(type), colour = factor(type)),alpha = 0.15) +
xlab("") +  scale_colour_manual(values = c("#00CCFF"))+
scale_fill_manual(values = c("#00CCFF"))+
ylab("Density
") +
annotate("text", x =  xintercept_1[1] / 2, y = -0.007 * max_coord_relative, label = "Promoter", size = 3) +
annotate("text", x =  xintercept_1[1] + coord_5utr_interval / 2, y = -0.007 * max_coord_relative, label = "5'UTR", size = 3) +
annotate("text", x =  xintercept_1[2] + coord_cds_interval / 2, y = -0.007 * max_coord_relative, label = "CDS", size = 3) +
annotate("text", x =  xintercept_1[3] +  coord_3utr_interval / 2, y = -0.007 * max_coord_relative, label = "3'UTR", size = 3) +
annotate("text", x =  xintercept_1[4] +  coord_tail_interval / 2, y = -0.007* max_coord_relative, label = "Tail", size = 3) +
geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0032 * max_coord_relative, ymax = -0.0025 * max_coord_relative, alpha = .8, colour = "black")+
annotate("rect", xmin = xintercept_1[2], xmax = xintercept_1[3], ymin = -0.0042 * max_coord_relative, ymax = -0.0017 * max_coord_relative, alpha = .3, colour = "black")+
annotate("rect", xmin = xintercept_1[3], xmax = xintercept_1[4], ymin = -0.0032 * max_coord_relative, ymax = -0.0025 * max_coord_relative, alpha = .8, colour = "black")
p1
data_plot
ggplot(data_plot, aes(x=coord, y=value)) +
ggtitle(title) +
theme(panel.background =element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
legend.position = 'bottom',
axis.text=element_text(size = 8),
legend.text=element_text(size = 8),
axis.title.y =element_text(size = 8 ,hjust=0.5),
title = element_text(size = 8, face='bold')) +
geom_smooth(size = 0.8, fullrange = TRUE, span =
ggplot(data_plot, aes(x=coord, y=value)) +
ggtitle(title) +
theme(panel.background =element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
legend.position = 'bottom',
axis.text=element_text(size = 8),
legend.text=element_text(size = 8),
axis.title.y =element_text(size = 8 ,hjust=0.5),
title = element_text(size = 8, face='bold'))
ggplot(data_plot, aes(x=coord, y=value)) +
ggtitle(title)
data_plot
title = ''
ggplot(data_plot, aes(x=coord, y=value)) +
ggtitle(title) +
theme(panel.background =element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
legend.position = 'bottom',
axis.text=element_text(size = 8),
legend.text=element_text(size = 8),
axis.title.y =element_text(size = 8 ,hjust=0.5),
title = element_text(size = 8, face='bold'))
p1 <-
ggplot(data_plot, aes(x=coord, y=value)) +
ggtitle(title) +
theme(panel.background =element_blank(),
panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
axis.text.x = element_blank(), axis.ticks = element_blank(),
line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
legend.position = 'bottom',
axis.text=element_text(size = 8),
legend.text=element_text(size = 8),
axis.title.y =element_text(size = 8 ,hjust=0.5),
title = element_text(size = 8, face='bold')) +
geom_smooth(size = 0.8, fullrange = TRUE, span = 0.15, se = FALSE, show.legend =TRUE, aes(color = factor(type))) +
xlab("") + scale_color_manual(values = 'blue') +
ylab("Density
") +
annotate("text", x = xintercept_1[1] / 2, y = -0.007/0.1*max_coord, label = "Promoter", size = 3) +
annotate("text", x =  xintercept_1[1] + coord_5utr_interval / 2, y = -0.007/0.1*max_coord, label = "5'UTR", size = 3) +
annotate("text", x =  xintercept_1[2] + coord_cds_interval / 2, y = -0.007/0.1*max_coord, label = "CDS", size = 3) +
annotate("text", x =  xintercept_1[3] +  coord_3utr_interval / 2, y = -0.007/0.1*max_coord, label = "3'UTR", size = 3) +
annotate("text", x =  xintercept_1[4] +  coord_tail_interval / 2, y = -0.007/0.1*max_coord, label = "Tail", size = 3) +
geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")+
annotate("rect", xmin = xintercept_1[2], xmax = xintercept_1[3], ymin = -0.0042/0.1*max_coord, ymax = -0.0017/0.1*max_coord, alpha = .3, colour = "black")+
annotate("rect", xmin = xintercept_1[3], xmax = xintercept_1[4], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")
}
p1
metaTXplot(remap_results)
metaTXplot(remap_results)
source("D:/MetaTX/MetaTX_multicurve/resource/metaTX/MetaTX/R/metaTXplot.R")
metaTXplot(remap_results)
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/metaTXplot.R")
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/metaTXplot.R")
metaTXplot(remap_results)
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/remapCoord.R")
remap_results_m6A_1 <- remapCoord(features = m6A_methyl, txdb = txdb, num_bin = 10)
remap_results_m6A <- remapCoord(features = m6A_methyl, txdb = txdb, num_bin = 10)
saveRDS(remap_results_m6A ,'remap_results_m6A.rds')
file <- system.file(package="MetaTX", "extdata/remap_results_m6A.rds")
file
remap_results_m6A <- readRDS(file)
remap_results_m6A
metaTXplot(remap_results_m6A)
load_all()
document()
p1 <- directPlot(remap_results_m6A)
p1
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/directPlot.R")
directPlot(remap_results)
remap_results
directPlot(remap_results)
directPlot(remap_results_m6A)
document()
prob_isoforms <- isoformProb(remap_results_m6A)
prob_isoforms
load_all()
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
file <- system.file(package="MetaTX", "extdata/m6A_methyl.rds")
m6A_methyl<- readRDS(file)
remap_results_m6A_1 <- remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
m6A_methyl
remap_results_m6A_1 <- remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/utility.R")
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/remapCoord.R")
remap_results_m6A_1 <- remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/utility.R")
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/remapCoord.R")
remap_results_m6A_1 <- remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/utility.R")
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/remapCoord.R")
remap_results_m6A_1 <- remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/utility.R")
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/remapCoord.R")
remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/utility.R")
remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
num_bin            = 10
num_bin_fiveUTR        <- num_bin
num_bin_cds            <- num_bin
num_bin_threeUTR       <- num_bin
num_bin_promoter       <- num_bin
num_bin_tail           <- num_bin
methyl                 <- features
trans                  <- mapToTranscripts(methyl, txdb)
library(GenomicRanges)
methyl                 <- features
trans                  <- mapToTranscripts(methyl, txdb)
library(GenomicFeatures)
methyl                 <- features
trans                  <- mapToTranscripts(methyl, txdb)
library(standardGeneric)
mapToTranscripts
txdb
mapToTranscripts(methyl, txdb)
methyl
methyl = m6A_methyl[1:100]
trans                  <- mapToTranscripts(features, txdb)
methyl                 <- features
trans                  <- mapToTranscripts(features, txdb)
trans                  <- mapToTranscripts(features, txdb)
features
features = m6A_methyl[1:100]
methyl                 <- features
trans                  <- mapToTranscripts(features, txdb)
trans_info             <- get_trans_function(trans, features)
trans_info
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/utility.R")
remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
isoformProb(remap_results_m6A)
remap_results_m6A
remap_results_m6A$trans_info
names(remap_results_m6A$trans_info)
names(remap_results_m6A$trans_info)<-  c("index_trans",  "index_feature", "seqnames",     "feature_pos" ,  "strand" ,      "trans_ID")
remap_results_m6A$trans_info
saveRDS(remap_results_m6A,)
saveRDS(remap_results_m6A,'remap_results_m6A')
saveRDS(remap_results_m6A,'remap_results_m6A.rds')
isoformProb(remap_results_m6A)
remap_results_m6A
remap_results_m6A
source("D:/MetaTX/MetaTX-devtools/MetaTX/R/isoformProb.R")
isoformProb(remap_results_m6A)
document()
check()
check()
check()
file <- system.file(package="MetaTX", "extdata/remap_results_m6A.rds")
remap_results_m6A <- readRDS(file)
prob_isoforms <- isoformProb(remap_results_m6A)
check()
library(devtools)
check()
file <- system.file(package="MetaTX", "extdata/remap_results_m6A.rds")
remap_results_m6A <- readRDS(file)
prob_isoforms <- isoformProb(remap_results_m6A)
remap_results_m6A
isoformProb(remap_results_m6A)
remap_results = remap_results_m6A
lambda = 0
align_mtr          <- remap_results[[1]]
width_mtr          <- remap_results[[2]]
trans_info         <- remap_results[[3]]
num_bin_sum        <- ncol(align_mtr)
load_all()
isoformProb(remap_results_m6A)
check()
metaTXplot(remap_results_m6A)
library(ggplot2)
metaTXplot(remap_results_m6A)
check()
check()
check()
check()
threeUTRsByTranscript
check()
check()
remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
file <- system.file(package="MetaTX", "extdata/m6A_methyl.rds")m6A_methyl<- readRDS(file)
file <- system.file(package="MetaTX", "extdata/m6A_methyl.rds")
m6A_methyl<- readRDS(file)
remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
features = m6A_methyl[1:100]
num_bin            = 10
num_bin_fiveUTR        <- num_bin
num_bin_cds            <- num_bin
num_bin_threeUTR       <- num_bin
num_bin_promoter       <- num_bin
num_bin_tail           <- num_bin
methyl                 <- features
trans                  <- mapToTranscripts(features, txdb)
trans_info             <- get_trans_function(trans, features)
# get annotation
cds_by_tx0   <- cdsBy(txdb, "tx")
fiveUTR_tx0  <- fiveUTRsByTranscript(txdb,use.names=FALSE)
threeUTR_tx0 <- threeUTRsByTranscript(txdb,use.names=FALSE)
num_bin_sum            <- num_bin_cds + num_bin_fiveUTR + num_bin_threeUTR
cds_align              <- get_align_function(num_bin_cds, trans_info, cds_by_tx0)
num_bin_cds
trans_info
trans
trans_info
get_trans_function(trans, features)
trans
methyl
sample_methyl_pos      <- start(ranges(methyl))
sample_methyl_seqnames <- data.frame(seqnames(methyl))[[1]]
trans_metadata         <- mcols(trans)
index_trans            <- 1:length(trans)
index_methyl           <- data.frame(trans)[, 'xHits']
seqnames               <- sample_methyl_seqnames[data.frame(trans)[, 'xHits']]
methyl_pos             <- sample_methyl_pos[data.frame(trans)[, 'xHits']]
strand                 <- data.frame(trans)[, 'strand']
trans_ID               <- data.frame(trans)[, 'transcriptsHits']
methyl_pos
index_methyl
seqnames
strand
trans_ID
methyl_pos
trans_ID
trans_info             <- data.frame(index_trans   = index_trans,
index_feature = index_methyl,
seqnames      = seqnames,
feature_pos   = methyl_pos,
strand        = strand,
trans_ID      = trans_ID)
trans_info
library(devtools)
load_all()
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
file <- system.file(package="MetaTX", "extdata/m6A_methyl.rds")
m6A_methyl<- readRDS(file)
remap_results_m6A_1 <- remapCoord(features = m6A_methyl[1:100], txdb = txdb, num_bin = 10)
features = m6A_methyl[1:100]
num_bin = 10
num_bin_fiveUTR        <- num_bin
num_bin_cds            <- num_bin
num_bin_threeUTR       <- num_bin
num_bin_promoter       <- num_bin
num_bin_tail           <- num_bin
methyl                 <- features
trans                  <- mapToTranscripts(features, txdb)
trans_info             <- get_trans_function(trans, features)
trans_info
trans
methyl
mapToTranscripts(features, txdb)
mapToTranscripts
mapToTranscripts(features, txdb)
sample_methyl_pos      <- start(ranges(methyl))
sample_methyl_seqnames <- data.frame(seqnames(methyl))[[1]]
trans_metadata         <- mcols(trans)
index_trans            <- 1:length(trans)
index_methyl           <- data.frame(trans)[, 'xHits']
seqnames               <- sample_methyl_seqnames[data.frame(trans)[, 'xHits']]
methyl_pos             <- sample_methyl_pos[data.frame(trans)[, 'xHits']]
strand                 <- data.frame(trans)[, 'strand']
trans_ID               <- data.frame(trans)[, 'transcriptsHits']
methyl_pos
trans_info             <- data.frame(index_trans   = index_trans,
index_feature = index_methyl,
seqnames      = seqnames,
feature_pos   = methyl_pos,
strand        = strand,
trans_ID      = trans_ID)
trans_info
get_trans_function(trans, features)
get_trans_function <-
function(trans, methyl){
sample_methyl_pos      <- start(ranges(methyl))
sample_methyl_seqnames <- data.frame(seqnames(methyl))[[1]]
trans_metadata         <- mcols(trans)
index_trans            <- 1:length(trans)
index_methyl           <- data.frame(trans)[, 'xHits']
seqnames               <- sample_methyl_seqnames[data.frame(trans)[, 'xHits']]
methyl_pos             <- sample_methyl_pos[data.frame(trans)[, 'xHits']]
strand                 <- data.frame(trans)[, 'strand']
trans_ID               <- data.frame(trans)[, 'transcriptsHits']
trans_info             <- data.frame(index_trans   = index_trans,
index_feature = index_methyl,
seqnames      = seqnames,
feature_pos   = methyl_pos,
strand        = strand,
trans_ID      = trans_ID)
return(trans_info)
}
get_trans_function(trans, methyl)
get_trans_function(trans, features)
methyl                 <- features
trans                  <- mapToTranscripts(features, txdb)
trans_info             <- get_trans_function(trans, features)
trans_info
library(devtools)
load_all()
load_all()
check()
start
value
value
check()
check()
check()
check()
check()
check()

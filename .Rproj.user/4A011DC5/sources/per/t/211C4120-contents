library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb           <- TxDb.Hsapiens.UCSC.hg19.knownGene
cds_by_tx0_1   <- cdsBy(txdb, "tx")
fiveUTR_tx0_1  <- fiveUTRsByTranscript(txdb,use.names=FALSE)
threeUTR_tx0_1 <- threeUTRsByTranscript(txdb,use.names=FALSE)

file <- system.file(package="MetaTX", "extdata", "m6A_methyl_1.rds")
m6A_methyl_1 <- readRDS(file)

remap_results_m6A_1 <- remapCoord(features = m6A_methyl_1[1:20], txdb = txdb, num_bin = 10, includeNeighborDNA = TRUE,
                                  cds_by_tx0         = cds_by_tx0_1,
                                  fiveUTR_tx0        = fiveUTR_tx0_1,
                                  threeUTR_tx0       = threeUTR_tx0_1)
p1 <-  metaTXplot(remap_results_m6A_1,
                  num_bin              = 10,
                  includeNeighborDNA   = TRUE,
                  relativeProportion   = c(1, 1, 1, 1),
                  title  = '(a)',
                  legend = 'relative',
                  type = 'relative'
)

library(RgnTX)
exons.tx0 <- exonsBy(txdb)
trans.ids <- names(exons.tx0)
sites_5utr <- randomizeTx(txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
                             trans_ids = trans.ids,
                             random_num = 10000,
                             type = "CDS",
                             random_length = 1)
sites_5utr <-GRangesList2GRanges(sites_5utr)
remap_results_1 <- remapCoord(features = sites_5utr, txdb = txdb, num_bin = 10, includeNeighborDNA = TRUE,
                                  cds_by_tx0         = cds_by_tx0_1,
                                  fiveUTR_tx0        = fiveUTR_tx0_1,
                                  threeUTR_tx0       = threeUTR_tx0_1)
p2 <-  metaTXplot(remap_results_1,
                  lambda = 0,
                  num_bin              = 10,
                  includeNeighborDNA   = TRUE,
                  relativeProportion   = c(1, 1, 1, 1),
                  title  = '(a)',
                  legend = 'relative',
                  type = 'relative'
)

p3 <-  directPlot(remap_results_1,
                  lambda = 0,
                  num_bin              = 10,
                  includeNeighborDNA   = TRUE,
                  relativeProportion   = c(1, 1, 1, 1),
                  title  = '(a)',
                  legend = 'relative',
                  type = 'relative'
)

# Real
align_mtr          <- remap_results_1[[1]]
width_mtr          <- remap_results_1[[2]]
trans_info         <- remap_results_1[[3]]
num_bin_sum        <- ncol(align_mtr)

trans_id_real <- sites_5utr$transcriptsHits
index_real <- unlist(lapply(1:max(trans_info[, 'index_methyl']), function(x){
  index_trans_x <- which(trans_info[, 'index_methyl'] == x)
  which_x <- which(trans_info[index_trans_x, 'trans_ID'] == trans_id_real[x])
  return(index_trans_x[which_x])
}))
align_mtr          <- align_mtr[index_real, ]
width_mtr          <- width_mtr[index_real, ]
trans_info         <- trans_info[index_real, ]
remap_results_real <- list(align_mtr, width_mtr, trans_info)

p4 <-  directPlot(remap_results_real,
                  lambda = 0,
                  num_bin              = 10,
                  includeNeighborDNA   = TRUE,
                  relativeProportion   = c(1, 1, 1, 1),
                  title  = '(a)',
                  legend = 'relative',
                  type = 'relative'
)

isoform_probs <- isoformProb(remap_results_1, num_bin = 10, includeNeighborDNA = TRUE, lambda = 0)
trans_id_real <- sites_5utr$transcriptsHits
index_prob_max <- lapply(1:max(isoform_probs[, 'index_methyl']), function(x){
  index_prob_x <- which(isoform_probs[, 'index_methyl'] == x)
  prob_x <- isoform_probs[index_prob_x, 'isoform_prob']
  which_x <- which(prob_x == max(prob_x))
  return(index_prob_x[which_x])
})

predict_results <-lapply(1:max(isoform_probs[, 'index_methyl']),
                         function(x){
  if(length(intersect(index_real[x], index_prob_max[[x]]))!=0){
    return(1)}else{return(0)}
  }
)

predict_results_1 <-lapply(1:max(isoform_probs[, 'index_methyl']),
                         function(x){
                           if(index_real[x]== index_prob_max[[x]][1]){
                             return(1)}else{return(0)}
                         }
)

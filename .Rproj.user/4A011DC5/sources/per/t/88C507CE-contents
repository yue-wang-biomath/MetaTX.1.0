#' Visualize the mapping results of genomic features directly to an mRNA model.
#' @export directPlot
#' @import ggplot2
#' @description Visualize the mapping results of genomic features directly to an mRNA model. It returns the counts/width of each bin without correcting isoform ambiguity.
#' @usage directPlot(remap_results, includeNeighborDNA = TRUE, relativeProportion = c(1, 1, 1, 1),
#' adjust = 0.15, title  = '', legend = '', returnPlot = TRUE, type = 'relative',
#' trueRelativeLength = FALSE)
#' @param remap_results A remap.results (list) object, which should be generated by \code{remapCoord} function.
#' @param includeNeighborDNA Whether include neighborhood regions (promoter and tail).
#' @param relativeProportion Ratio of the lengths of 5'UTR/CDS/3'UTR/NeighborDNA(promoter and tail) in the returned figure.
#' @param adjust A multiplicate bandwidth adjustment. This makes it possible to adjust the bandwidth while still using the a bandwidth estimator. For example, adjust = 1/2 means use half of the default bandwidth.
#' @param title Title of the returned plot.
#' @param legend Legend of the returned plot.
#' @param returnPlot If TRUE, the function returns a ggplot of genomic feature plots distribution on mRNA. If FALSE, the function returns feature density distribution values on each bin.
#' @param type If 'absolute', the function calculates absolute density (with the unit: number of features per bp) distribution. If 'relative', the function calculates probability density distribution.
#' @param trueRelativeLength If TRUE, the ratio of the lengths of each mRNA component 5'UTR/CDS/3'UTR/NeighborDNA(promoter and tail) in the returned figure follows the true length ratio among them.
#' @return A figure or a data.frame object.
directPlot <-
  function(    remap_results,
               includeNeighborDNA   = TRUE,
               relativeProportion   = c(1, 1, 1, 1),
               adjust = 0.15,
               title  = '',
               legend = '',
               returnPlot = TRUE,
               type = 'relative',
               trueRelativeLength = FALSE
  ){
    align_mtr          <- remap_results[[1]]
    width_mtr          <- remap_results[[2]]
    trans_info         <- remap_results[[3]]
    num_bin_sum        <- ncol(align_mtr)


    if(includeNeighborDNA){
      num_bin                <- num_bin_sum / 5
      num_bin_fiveUTR        <- num_bin
      num_bin_cds            <- num_bin
      num_bin_threeUTR       <- num_bin
      num_bin_promoter       <- num_bin
      num_bin_tail           <- num_bin

      if(trueRelativeLength == TRUE){
        colsum.width         <- colSums(width_mtr)
        relativeProportion     <- c(sum(colsum.width[(num_bin+1):(num_bin*2)]),
                                    sum(colsum.width[(num_bin*2+1):(num_bin*3)]),
                                    sum(colsum.width[(num_bin*3+1):(num_bin*4)]),
                                    sum(colsum.width[1:num_bin]))
      }

      coord_interval         <- relativeProportion / min(relativeProportion)

      coord_promoter_interval<- coord_interval[4] * num_bin
      coord_promoter_Start   <- coord_interval[4] / 2
      coord_promoter_end     <- coord_promoter_interval - coord_interval[4] / 2
      coord_promoter         <- seq(coord_promoter_Start, coord_promoter_end,  coord_interval[4])

      coord_5utr_interval    <- coord_interval[1] * num_bin
      coord_5utr_Start       <- coord_promoter_interval + coord_interval[1] / 2
      coord_5utr_end         <- coord_promoter_interval + coord_5utr_interval - coord_interval[1] / 2
      coord_5utr             <- seq(coord_5utr_Start, coord_5utr_end, coord_interval[1])

      coord_cds_interval     <- coord_interval[2] * num_bin
      coord_cds_Start        <- coord_promoter_interval + coord_5utr_interval + coord_interval[2] / 2
      coord_cds_end          <- coord_promoter_interval + coord_5utr_interval + coord_cds_interval - coord_interval[2] / 2
      coord_cds              <- seq(coord_cds_Start, coord_cds_end, coord_interval[2])

      coord_3utr_interval    <- coord_interval[3] * num_bin
      coord_3utr_Start       <- coord_promoter_interval + coord_5utr_interval + coord_cds_interval + coord_interval[3] / 2
      coord_3utr_end         <- coord_promoter_interval + coord_5utr_interval + coord_cds_interval + coord_3utr_interval - coord_interval[3] / 2
      coord_3utr             <- seq(coord_3utr_Start, coord_3utr_end, coord_interval[3])

      coord_tail_interval    <- coord_interval[4] * num_bin
      coord_tail_Start       <- coord_promoter_interval + coord_5utr_interval + coord_cds_interval + coord_3utr_interval + coord_interval[4] / 2
      coord_tail_end         <- coord_promoter_interval + coord_5utr_interval + coord_cds_interval + coord_3utr_interval + coord_tail_interval - coord_interval[4] / 2
      coord_tail             <- seq(coord_tail_Start, coord_tail_end, coord_interval[4])

      xintercept_1           <- c(coord_promoter_interval,
                                  coord_promoter_interval + coord_5utr_interval,
                                  coord_promoter_interval + coord_5utr_interval + coord_cds_interval,
                                  coord_promoter_interval + coord_5utr_interval + coord_cds_interval + coord_3utr_interval)
      coord <- c(coord_promoter, coord_5utr, coord_cds, coord_3utr, coord_tail)

      width_coord            <- coord_promoter_interval + coord_5utr_interval + coord_cds_interval + coord_3utr_interval + coord_tail_interval
      coord                  <- coord / width_coord
      xintercept_1           <- xintercept_1 / width_coord
      coord_promoter_interval<- coord_promoter_interval / width_coord
      coord_5utr_interval    <- coord_5utr_interval / width_coord
      coord_cds_interval     <- coord_cds_interval / width_coord
      coord_3utr_interval    <- coord_3utr_interval / width_coord
      coord_tail_interval    <- coord_tail_interval / width_coord

    }else{
      num_bin                <- num_bin_sum / 3
      num_bin_fiveUTR        <- num_bin
      num_bin_cds            <- num_bin
      num_bin_threeUTR       <- num_bin

      if(trueRelativeLength == TRUE){
        colsum.width         <- colSums(width_mtr)
        relativeProportion     <- c(sum(colsum.width[1:num_bin]),
                                    sum(colsum.width[(num_bin+1):(num_bin*2)]),
                                    sum(colsum.width[(num_bin*2+1):(num_bin*3)]))
      }


      coord_interval         <- relativeProportion / min(relativeProportion)

      coord_5utr_interval    <- coord_interval[1] * num_bin
      coord_5utr_Start       <- coord_interval[1] / 2
      coord_5utr_end         <- coord_5utr_interval - coord_interval[1] / 2
      coord_5utr             <- seq(coord_5utr_Start, coord_5utr_end, coord_interval[1])

      coord_cds_interval     <- coord_interval[2] * num_bin
      coord_cds_Start        <- coord_5utr_interval + coord_interval[2] / 2
      coord_cds_end          <- coord_5utr_interval + coord_cds_interval - coord_interval[2] / 2
      coord_cds              <- seq(coord_cds_Start, coord_cds_end, coord_interval[2])

      coord_3utr_interval    <- coord_interval[3] * num_bin
      coord_3utr_Start       <- coord_5utr_interval + coord_cds_interval + coord_interval[3] / 2
      coord_3utr_end         <- coord_5utr_interval + coord_cds_interval + coord_3utr_interval - coord_interval[3] / 2
      coord_3utr             <- seq(coord_3utr_Start, coord_3utr_end, coord_interval[3])

      xintercept_1           <- c(coord_5utr_interval,
                                  coord_5utr_interval + coord_cds_interval)

      coord <- c(coord_5utr, coord_cds, coord_3utr)

      width_coord            <- coord_5utr_interval + coord_cds_interval + coord_3utr_interval
      coord                  <- coord / width_coord
      xintercept_1           <- xintercept_1 / width_coord
      coord_5utr_interval    <- coord_5utr_interval / width_coord
      coord_cds_interval     <- coord_cds_interval / width_coord
      coord_3utr_interval    <- coord_3utr_interval / width_coord
    }


     alpha            <- get_prob_function(align_mtr, width_mtr)



    if(includeNeighborDNA){

      if(type == 'absolute'){

        data_plot           <- data.frame(coord  = coord
                                          , value =  alpha / colSums(width_mtr) * nrow(align_mtr)
                                          , type  = paste0(legend, '_MetaTX'))
        colnames(data_plot)  <- c('coord', 'value', 'type')
        row.names(data_plot) <- 1:nrow(data_plot)
        max_coord            <- max(data_plot[, 2])


        p1 <-
          ggplot(data_plot, aes(x=coord, y=value)) +
          ggtitle(title) +
          theme(panel.background =element_blank(),
                panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
                axis.text.x = element_blank(), axis.ticks = element_blank(),
                line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
                legend.position = 'bottom',
                axis.text=element_text(size = 8),
                legend.text=element_text(size = 8),
                axis.title.y =element_text(size = 8 ,hjust=0.5),
                title = element_text(size = 8, face='bold')) +
          geom_smooth(size = 0.8, fullrange = TRUE, span = 0.15, se = FALSE, show.legend =TRUE, aes(color = factor(type))) +
          xlab("") + scale_color_manual(values = 'blue') +
          ylab("Density
               ") +
          annotate("text", x = xintercept_1[1] / 2, y = -0.007/0.1*max_coord, label = "Promoter", size = 3) +
          annotate("text", x =  xintercept_1[1] + coord_5utr_interval / 2, y = -0.007/0.1*max_coord, label = "5'UTR", size = 3) +
          annotate("text", x =  xintercept_1[2] + coord_cds_interval / 2, y = -0.007/0.1*max_coord, label = "CDS", size = 3) +
          annotate("text", x =  xintercept_1[3] +  coord_3utr_interval / 2, y = -0.007/0.1*max_coord, label = "3'UTR", size = 3) +
          annotate("text", x =  xintercept_1[4] +  coord_tail_interval / 2, y = -0.007/0.1*max_coord, label = "Tail", size = 3) +
          geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
          annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")+
          annotate("rect", xmin = xintercept_1[2], xmax = xintercept_1[3], ymin = -0.0042/0.1*max_coord, ymax = -0.0017/0.1*max_coord, alpha = .3, colour = "black")+
          annotate("rect", xmin = xintercept_1[3], xmax = xintercept_1[4], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")
      }

      if(type == 'relative'){
        data_plot            <- data.frame(coord  = coord
                                           , value =    alpha / colSums(width_mtr) / sum(alpha / colSums(width_mtr))
                                           , type  = paste0(legend, '_MetaTX'))
        colnames(data_plot)  <- c('coord', 'value', 'type')
        row.names(data_plot) <- 1:nrow(data_plot)


        coord_interval_seq   <- c(replicate(num_bin,coord_promoter_interval / num_bin),
                                  replicate(num_bin,coord_5utr_interval / num_bin),
                                  replicate(num_bin,coord_cds_interval / num_bin),
                                  replicate(num_bin,coord_3utr_interval / num_bin),
                                  replicate(num_bin,coord_tail_interval / num_bin))

        max_coord            <- max(data_plot[, 2])
        max_coord_relative   <- max_coord / sum(data_plot[,2] * coord_interval_seq)
        max_coord_relative   <- max_coord_relative / adjust

        data_plot_1            <- data_plot
        plot_values            <- data_plot[, 2]
        plot_values            <- c(plot_values[1:num_bin] * coord_promoter_interval,
                                    plot_values[1:num_bin + num_bin] * coord_5utr_interval,
                                    plot_values[1:num_bin + num_bin*2] * coord_cds_interval,
                                    plot_values[1:num_bin + num_bin*3] * coord_3utr_interval,
                                    plot_values[1:num_bin + num_bin*4] * coord_tail_interval)
        plot_values            <-  plot_values / sum(plot_values)
        data_plot_1[, 2]       <- plot_values

        p1 <-
          ggplot(data_plot_1, aes(x=coord, group=type, weight=value)) +
          ggtitle(title) +
          theme(panel.background =element_blank(),
                panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
                axis.text.x = element_blank(), axis.ticks = element_blank(),
                line = element_line(colour = "white", size = 0.5, linetype = 9, lineend = "butt"),
                legend.position = 'bottom',
                axis.text=element_text(size = 8),
                legend.text=element_text(size = 8),
                axis.title.y =element_text(size = 8 ,hjust=0.5),
                title = element_text(size = 8, face='bold')) +
          geom_density(adjust = adjust, aes(fill=factor(type), colour = factor(type)),alpha = 0.15) +
          xlab("") +  scale_colour_manual(values = c("#00CCFF"))+
          scale_fill_manual(values = c("#00CCFF"))+
          ylab("Density
               ") +
          annotate("text", x =  xintercept_1[1] / 2, y = -0.007 * max_coord_relative, label = "Promoter", size = 3) +
          annotate("text", x =  xintercept_1[1] + coord_5utr_interval / 2, y = -0.007 * max_coord_relative, label = "5'UTR", size = 3) +
          annotate("text", x =  xintercept_1[2] + coord_cds_interval / 2, y = -0.007 * max_coord_relative, label = "CDS", size = 3) +
          annotate("text", x =  xintercept_1[3] +  coord_3utr_interval / 2, y = -0.007 * max_coord_relative, label = "3'UTR", size = 3) +
          annotate("text", x =  xintercept_1[4] +  coord_tail_interval / 2, y = -0.007* max_coord_relative, label = "Tail", size = 3) +
          geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
          annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0032 * max_coord_relative, ymax = -0.0025 * max_coord_relative, alpha = .8, colour = "black")+
          annotate("rect", xmin = xintercept_1[2], xmax = xintercept_1[3], ymin = -0.0042 * max_coord_relative, ymax = -0.0017 * max_coord_relative, alpha = .3, colour = "black")+
          annotate("rect", xmin = xintercept_1[3], xmax = xintercept_1[4], ymin = -0.0032 * max_coord_relative, ymax = -0.0025 * max_coord_relative, alpha = .8, colour = "black")
      }

    }else{

      if(type == 'relative'){
        data_plot            <- data.frame(coord  = coord
                                           , value =    alpha / colSums(width_mtr) / sum(alpha / colSums(width_mtr))
                                           , type  = paste0(legend, '_MetaTX'))
        colnames(data_plot)  <- c('coord', 'value', 'type')
        row.names(data_plot) <- 1:nrow(data_plot)


        coord_interval_seq   <- c(replicate(num_bin,coord_5utr_interval / num_bin),
                                  replicate(num_bin,coord_cds_interval / num_bin),
                                  replicate(num_bin,coord_3utr_interval / num_bin))

        max_coord            <- max(data_plot[, 2])
        max_coord_relative   <- max_coord / sum(data_plot[,2] * coord_interval_seq)
        max_coord_relative   <- max_coord_relative / adjust

        data_plot_1            <- data_plot
        plot_values            <- data_plot[, 2]
        plot_values            <- c(plot_values[1:num_bin] * coord_5utr_interval,
                                    plot_values[1:num_bin + num_bin*1] * coord_cds_interval,
                                    plot_values[1:num_bin + num_bin*2] * coord_3utr_interval)
        plot_values            <-  plot_values / sum(plot_values)
        data_plot_1[, 2]       <- plot_values
        p1 <-
          ggplot(data_plot, aes(x=coord, group=type, weight=value)) +
          ggtitle(title) +
          theme(panel.background =element_blank(),
                panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
                axis.text.x = element_blank(), axis.ticks = element_blank(),
                line = element_line(colour = "white", size = 0.2, linetype = 9, lineend = "butt"),
                legend.position = 'bottom',
                axis.text=element_text(size = 8),
                legend.text=element_text(size = 8),
                axis.title.y =element_text(size = 8 ,hjust=0.5),
                title = element_text(size = 8, face='bold')) +
          geom_density(adjust = adjust, aes(fill=factor(type), colour = factor(type)),alpha = 0.15) +
          xlab("") +  scale_colour_manual(values = c("#00CCFF"))+
          scale_fill_manual(values = c("#00CCFF"))+
          ylab("Density
               ") +
          annotate("text", x = xintercept_1[1] / 2, y = -0.007 * max_coord_relative, label = "5'UTR",  size = 3) +
          annotate("text", x = xintercept_1[1] + coord_cds_interval / 2, y = -0.007 * max_coord_relative, label = "CDS",  size = 3) +
          annotate("text", x = xintercept_1[2] +  coord_3utr_interval / 2, y = -0.007 * max_coord_relative, label = "3'UTR",  size = 3) +
          geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
          annotate("rect", xmin = num_bin_sum * 0,  xmax = xintercept_1[1], ymin = -0.0032 * max_coord_relative, ymax = -0.0025 * max_coord_relative, alpha = .8, colour = "black")+
          annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0042 * max_coord_relative, ymax = -0.0017 * max_coord_relative, alpha = .3, colour = "black")+
          annotate("rect", xmin =xintercept_1[2], xmax = coord_5utr_interval + coord_cds_interval + coord_3utr_interval, ymin = -0.0032 * max_coord_relative, ymax = -0.0025 * max_coord_relative, alpha = .8, colour = "black")
      }

      if(type == 'absolute'){
        data_plot           <- data.frame(coord  = coord
                                          , value =    alpha / colSums(width_mtr) * nrow(align_mtr)
                                          , type  = paste0(legend, '_MetaTX'))
        colnames(data_plot)  <- c('coord', 'value', 'type')
        row.names(data_plot) <- 1:nrow(data_plot)
        max_coord            <- max(data_plot[, 2])

        p1 <-
          ggplot(data_plot, aes(x=coord, y=value))+
          ggtitle(title) +
          theme(panel.background = element_blank(),
                panel.grid.major = element_line(colour = 'grey', linetype = 9, size = 0.2),
                axis.text.x = element_blank(), axis.ticks = element_blank(),
                line = element_line(colour = "white", size = 0.2, linetype = 9, lineend = "butt"),
                legend.position = 'bottom',
                axis.text=element_text(size = 8),
                legend.text=element_text(size = 8),
                axis.title.y =element_text(size = 8 ,hjust=0.5),
                title = element_text(size = 8, face='bold')) +
          geom_smooth(size = 0.8, span = 0.2, se = FALSE, show.legend =TRUE) +
          xlab("") + scale_color_manual(values = 'blue') +
          ylab("Density
               ") +
          annotate("text", x = xintercept_1[1] / 2, y = -0.007/0.1*max_coord, label = "5'UTR",  size = 3) +
          annotate("text", x = xintercept_1[1] + coord_cds_interval / 2, y = -0.007/0.1*max_coord, label = "CDS",  size = 3) +
          annotate("text", x = xintercept_1[2] +  coord_3utr_interval / 2, y = -0.007/0.1*max_coord, label = "3'UTR",  size = 3) +
          geom_vline(xintercept= xintercept_1, linetype = 9, size = 0.2,colour = 'black') +
          annotate("rect", xmin = num_bin_sum * 0,  xmax = xintercept_1[1], ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")+
          annotate("rect", xmin = xintercept_1[1], xmax = xintercept_1[2], ymin = -0.0042/0.1*max_coord, ymax = -0.0017/0.1*max_coord, alpha = .3, colour = "black")+
          annotate("rect", xmin =xintercept_1[2], xmax = coord_5utr_interval + coord_cds_interval + coord_3utr_interval, ymin = -0.0032/0.1*max_coord, ymax = -0.0025/0.1*max_coord, alpha = .8, colour = "black")
      }
    }


    if(returnPlot){
      return(p1)}else{
        return(data_plot)
      }
  }

#' Calculte the probability of each genomic feature being located on different isoform transcripts.
#' @export isoformProb
#' @description Calculte the probability of each genomic feature being located on different isoform transcripts.
#' @usage isoformProb(remap_results, includeNeighborDNA = TRUE, lambda = 0)
#' @param remap_results A remap.results (list) object, which should be generated by \code{remapCoord} function.
#' @param includeNeighborDNA Whether include neighborhood regions (promoter and tail).
#' @param lambda Penalty level for shorter transcript information. 0 means shorter transcripts are not penalized.
#' @return A data frame. The columns are transcript(isoform) index, feature index, seqnames, genomic position, strand, transcript(isoform) ID, and the probability of each genomic feature being located on the corresponding isoform transcript.
#' @examples
#' file <- system.file(package="MetaTX", "extdata/remap_results_m6A.rds")
#' remap_results_m6A <- readRDS(file)
#' prob_isoforms <- isoformProb(remap_results_m6A)
isoformProb <-
function(remap_results,
         includeNeighborDNA = TRUE,
         lambda = 0
    ){
        align_mtr          <- remap_results[[1]]
        width_mtr          <- remap_results[[2]]
        trans_info         <- remap_results[[3]]
        num_bin_sum        <- ncol(align_mtr)

        if(includeNeighborDNA){
          num_bin          <- num_bin_sum / 5
          weight_start     <- num_bin + 1
          weight_end       <- num_bin * 4
          weight_mtr       <- replicate(num_bin_sum, rowSums(width_mtr[, weight_start:weight_end]))
          prob_mtr         <- get_correct_prob_function(num_bin_sum, align_mtr, weight_mtr^lambda, trans_info)[[2]]
         }else{
          weight_mtr       <- replicate(num_bin_sum, rowSums(width_mtr))
          prob_mtr         <- get_correct_prob_function(num_bin_sum, align_mtr, weight_mtr^lambda, trans_info)[[2]]
          }

        prob           <- as.numeric(rowSums(prob_mtr))
        prob_isoforms  <-  cbind(trans_info,
                                 isoform_prob = prob)
        return(prob_isoforms)
    }
